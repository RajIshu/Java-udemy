<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<!--VBox Layout-->
<!--<VBox alignment="CENTER" spacing="20.0" xmlns:fx="http://javafx.com/fxml"
      fx:controller="com.javamasterclass.layout.HelloController">
    <padding>
        <Insets bottom="20.0" left="20.0" right="20.0" top="20.0"/>
    </padding>

    <Label fx:id="welcomeText"/>
    <Button text="Hello!" onAction="#onHelloButtonClick"/>
</VBox>-->
<!--GridPane-->
<!--<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<GridPane fx:controller="com.javamasterclass.layout.HelloController"
          xmlns:fx="http://javafx.com/fxml" alignment="top_center" hgap="10" vgap="10"
          gridLinesVisible="true">
    &lt;!&ndash;
        In the above Line, we can see that the alignment is set to Center.

        Alignment basically decides the position of Starting Grid inside the GridPane.

        hgap and vgap is gap or space between the components.

        For debugging purpose, we can make the grid lines visible for better visibility of the components
        using 'gridLinesVisible' parameter.

        We can change alignment from 'center' to 'top_center', 'bottom_center', etc.

        But aligning the GridPane to 'top_center' leaves no gap between titlePane and GridPane.
        So, we need to add padding in between.
    &ndash;&gt;
    <padding>
        <Insets top="10"/>
    </padding>
    &lt;!&ndash;
        Insets:
        - In JavaFX, insets refers to the space between the edges of a container (such as a Pane or BorderPane)
          and its content.
        - The "Insets" class in JavaFX is used to represent this space, and it can be specified for a container
          in order to provide some space around its content.
    &ndash;&gt;

    &lt;!&ndash;<Button text="Button 1"/>
    <Button text="Button 2"/>
    <Button text="Button 3"/>
    <Button text="Very Long Button 4"/>
    <Button text="Button 5"/>

    The Above Codes for Button are without row and column parameter that's why they stacked upon each other.
    Default Position is Row=0 and Column=0.

    We can use ColumnConstraints for assigning the area/space column will occupy.
    It can be in percentage or pixels.
    &ndash;&gt;

    &lt;!&ndash;<columnConstraints>
        <ColumnConstraints percentWidth="50.0"/>
        <ColumnConstraints percentWidth="50.0"/>
    </columnConstraints>&ndash;&gt;

    <Button text="Button 1" GridPane.rowIndex="0" GridPane.columnIndex="0"
        GridPane.halignment="RIGHT"/>
    &lt;!&ndash; halignment is used for horizontal alignment in a column space. &ndash;&gt;
    <Button text="Button 2" GridPane.rowIndex="0" GridPane.columnIndex="1"/>
    <Button text="Button Three" GridPane.rowIndex="1" GridPane.columnIndex="0"/>
    <Button text="Very Long Button 4" GridPane.rowIndex="3" GridPane.columnIndex="0"
        GridPane.columnSpan="2"/>
    &lt;!&ndash; columnSpan allows content to span across multiple columns. &ndash;&gt;
    <Button text="Button 5" GridPane.rowIndex="2" GridPane.columnIndex="0"/>
</GridPane>-->
<!--HBox-->
<!--<?import javafx.scene.layout.HBox?>
<HBox fx:controller="com.javamasterclass.layout.HelloController"
      xmlns:fx="http://javafx.com/fxml" alignment="bottom_right"
      style="-fx-border-color: red; -fx-border-width: 3; -fx-border-style:dashed"
      spacing="10">
    <padding>
        <Insets bottom="10" right="10"/>
    </padding>

    <Button text="Okay" prefWidth="90"/>
    <Button text="Cancel" prefWidth="90"/>
    <Button text="Help" prefWidth="90"/>
</HBox>-->
<!--prefWidth is used to set or define the preferred width of the component.-->
<!--VBox-->
<!--It has been used above too-->
<!--
<VBox fx:controller="com.javamasterclass.layout.HelloController"
      xmlns:fx="http://javafx.com/fxml" alignment="bottom_right"
      style="-fx-border-color: red; -fx-border-width: 3; -fx-border-style:dashed"
      spacing="10">
<padding>
    <Insets bottom="10" right="10"/>
</padding>

<Button text="Okay" prefWidth="90"/>
<Button text="Cancel" prefWidth="90"/>
<Button text="Help" prefWidth="90"/>
</VBox>-->
<!--BorderPane (along with HBox inside it i.e., nested layout) -->

<BorderPane xmlns:fx="http://javafx.com/fxml/1"
            xmlns="http://javafx.com/javafx/17.0.2-ea"
            fx:controller="com.javamasterclass.layout.HelloController">
    <top>
        <Label text="This label is in top position" alignment="CENTER"
               BorderPane.alignment="CENTER"
               style="-fx-border-color: blue; -fx-border-width: 2; -fx-border-style:dashed"/>
    </top>
    <bottom>
        <HBox alignment="top_right" prefWidth="768.0" spacing="10">
            <padding>
                <Insets bottom="10" right="10" />
            </padding>
            <Button prefWidth="90" text="Okay" />
            <Button prefWidth="90" text="Cancel" />
            <Button prefWidth="90" text="Help" />
        </HBox>
    </bottom>
</BorderPane>
